package modules

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
)

// RegistryKey defines a specific registry key to export.
type RegistryKey struct {
	Name string // A friendly name for the key (e.g., "Startup Programs - HKLM")
	Path string // The full path to the registry key (e.g., "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run")
}

// GenerateRegistryExport exports specified registry keys to .reg files in a dedicated subfolder.
func GenerateRegistryExport(outputDir string) error {
	var output bytes.Buffer
	summaryOutputPath := filepath.Join(outputDir, "Registry_Export_Summary.txt")

	// Define the subfolder for registry exports
	registryExportSubDir := filepath.Join(outputDir, "RegistryExports")

	// Create the subfolder if it doesn't exist
	if err := os.MkdirAll(registryExportSubDir, os.ModePerm); err != nil {
		return fmt.Errorf("failed to create registry export subdirectory '%s': %w", registryExportSubDir, err)
	}

	// Define common registry keys for export that are often relevant for diagnostics.
	// Add or remove keys as per your diagnostic needs.
	keysToExport := []RegistryKey{
		{Name: "Startup_Programs_HKLM", Path: "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run"},
		{Name: "Startup_Programs_HKCU", Path: "HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run"},
		{Name: "Services_ControlSet_HKLM", Path: "HKLM\\SYSTEM\\CurrentControlSet\\Services"}, // This is a very large key; might take time
		{Name: "Network_Adapters", Path: "HKLM\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters\\Interfaces"},
		{Name: "Software_Uninstall_HKLM", Path: "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall"},
		{Name: "Software_Uninstall_Wow6432Node", Path: "HKLM\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall"},
		{Name: "Shell_Execute_Policies", Path: "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run"},
		{Name: "User_Initials_Logon", Path: "HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon"},
		{Name: "Security_Providers_LSA", Path: "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa"},
	}

	output.WriteString("--- Registry Export Report ---\n\n")
	output.WriteString(fmt.Sprintf("Registry keys have been attempted for export to:\n%s\n\n", registryExportSubDir))

	for _, key := range keysToExport {
		exportFilePath := filepath.Join(registryExportSubDir, fmt.Sprintf("RegExport_%s.reg", key.Name))
		// Use /y to overwrite existing files without prompt
		cmd := exec.Command("reg", "export", key.Path, exportFilePath, "/y")

		// Capture combined output (stdout and stderr) for debugging purposes
		cmdOutput, err := cmd.CombinedOutput()
		if err != nil {
			output.WriteString(fmt.Sprintf("ERROR: Failed to export '%s' (%s).\n", key.Name, key.Path))
			output.WriteString(fmt.Sprintf("  Details: %s\n  Error: %v\n\n", bytes.TrimSpace(cmdOutput), err))
		} else {
			output.WriteString(fmt.Sprintf("SUCCESS: Exported '%s' to %s\n", key.Name, filepath.Base(exportFilePath))) // Show just filename in summary
		}
	}

	output.WriteString("\n\n--- Footer ---\n")
	output.WriteString("Report generated by GoDiag. Learn more at https://github.com/LewdLillyVT/godiag")

	// Save the summary of export operations to a text file
	return os.WriteFile(summaryOutputPath, output.Bytes(), 0644)
}
