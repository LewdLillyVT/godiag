package modules

import (
	"bytes"
	"os"
	"os/exec"
	"path/filepath"
)

// GenerateSoftwareReport gathers various software and application-related information and saves it to a text file.
func GenerateSoftwareReport(outputDir string) error {
	var output bytes.Buffer
	outputPath := filepath.Join(outputDir, "Software_Diagnostics_Report.txt")

	// --- 1. Installed Programs (wmic product get Name,Version,InstallDate) ---
	output.WriteString("--- Installed Programs ---\n\n")
	// Using powershell to get installed programs from Add/Remove Programs list (more comprehensive than wmic product)
	// Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, InstallDate, Publisher
	installedProgramsCmd := `Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*, HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, InstallDate, Publisher | Format-Table -AutoSize`
	installedPrograms, err := exec.Command("powershell", "-Command", installedProgramsCmd).Output()
	if err != nil {
		output.WriteString("Error gathering installed programs: " + err.Error() + "\n\n")
	} else {
		output.Write(installedPrograms)
	}
	output.WriteString("\n\n")

	// --- 2. Running Processes (wmic process get Name,ProcessId,WorkingSetSize,CommandLine) ---
	output.WriteString("--- Running Processes ---\n\n")
	// Note: WorkingSetSize is in bytes, you might want to convert to MB/GB in a more advanced UI
	runningProcesses, err := exec.Command("wmic", "process", "get", "Name,ProcessId,WorkingSetSize,CommandLine", "/format:list").Output()
	if err != nil {
		output.WriteString("Error gathering running processes: " + err.Error() + "\n\n")
	} else {
		output.Write(runningProcesses)
	}
	output.WriteString("\n\n")

	// --- 3. Windows Services (wmic service get Name,DisplayName,State,StartMode,PathName) ---
	output.WriteString("--- Windows Services ---\n\n")
	windowsServices, err := exec.Command("wmic", "service", "get", "Name,DisplayName,State,StartMode,PathName", "/format:list").Output()
	if err != nil {
		output.WriteString("Error gathering Windows services: " + err.Error() + "\n\n")
	} else {
		output.Write(windowsServices)
	}
	output.WriteString("\n\n")

	// --- 4. Startup Programs (wmic startup get Caption,Command,Location,User) ---
	output.WriteString("--- Startup Programs ---\n\n")
	startupPrograms, err := exec.Command("wmic", "startup", "get", "Caption,Command,Location,User", "/format:list").Output()
	if err != nil {
		output.WriteString("Error gathering startup programs: " + err.Error() + "\n\n")
	} else {
		output.Write(startupPrograms)
	}
	output.WriteString("\n\n")

	// --- Footer ---
	output.WriteString("\n\nReport generated by GoDiag. Learn more at https://github.com/LewdLillyVT/godiag")

	// Save to file
	return os.WriteFile(outputPath, output.Bytes(), 0644)
}