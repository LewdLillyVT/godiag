package modules

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
)

// GenerateNetworkReport gathers various network-related information and saves it to a text file.
func GenerateNetworkReport(outputDir string) error {
	var output bytes.Buffer
	outputPath := filepath.Join(outputDir, "Network_Diagnostics_Report.txt")

	// --- 1. IP Configuration (ipconfig /all) ---
	output.WriteString("--- IP Configuration (ipconfig /all) ---\n\n")
	ipConfig, err := exec.Command("ipconfig", "/all").Output()
	if err != nil {
		output.WriteString("Error gathering IP configuration: " + err.Error() + "\n\n")
	} else {
		output.Write(ipConfig)
	}
	output.WriteString("\n\n")

	// --- 2. Active Network Connections (netstat -ano) ---
	output.WriteString("--- Active Network Connections (netstat -ano) ---\n\n")
	netstat, err := exec.Command("netstat", "-ano").Output()
	if err != nil {
		output.WriteString("Error gathering active network connections: " + err.Error() + "\n\n")
	} else {
		output.Write(netstat)
	}
	output.WriteString("\n\n")

	// --- 3. Route Print (route print) ---
	output.WriteString("--- IP Routing Table (route print) ---\n\n")
	routePrint, err := exec.Command("route", "print").Output()
	if err != nil {
		output.WriteString("Error gathering routing table: " + err.Error() + "\n\n")
	} else {
		output.Write(routePrint)
	}
	output.WriteString("\n\n")

	// --- 4. DNS Cache (ipconfig /displaydns) ---
	output.WriteString("--- DNS Resolver Cache (ipconfig /displaydns) ---\n\n")
	dnsCache, err := exec.Command("ipconfig", "/displaydns").Output()
	if err != nil {
		output.WriteString("Error gathering DNS cache: " + err.Error() + "\n\n")
	} else {
		output.Write(dnsCache)
	}
	output.WriteString("\n\n")

	// --- 5. Basic Connectivity Test (ping google.com) ---
	output.WriteString("--- Basic Connectivity Test (ping google.com) ---\n\n")
	pingTest, err := exec.Command("ping", "-n", "4", "google.com").Output() // 4 pings
	if err != nil {
		output.WriteString("Error performing connectivity test to google.com: " + err.Error() + "\n\n")
	} else {
		output.Write(pingTest)
	}
	output.WriteString("\n\n")

	// --- Footer ---
	output.WriteString("\n\nReport generated by GoDiag. Learn more at https://github.com/LewdLillyVT/godiag")

	// Save to file
	return os.WriteFile(outputPath, output.Bytes(), 0644)
}

// FlushDNSCache flushes the DNS resolver cache.
func FlushDNSCache() error {
	cmd := exec.Command("ipconfig", "/flushdns")
	output, err := cmd.CombinedOutput() // Capture output for potential error messages
	if err != nil {
		return fmt.Errorf("failed to flush DNS cache: %v - %s", err, string(output))
	}
	// Optionally, you can return a success message from here or let the calling function handle dialogs
	return nil
}
