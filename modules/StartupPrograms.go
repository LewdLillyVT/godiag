package modules

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
)

// GenerateStartupProgramsReport collects information about programs configured to run automatically at system startup
// from common registry keys and startup folders, and saves it to a text file.
func GenerateStartupProgramsReport(outputDir string) error {
	var output bytes.Buffer
	// This will create a new file specifically for startup programs report.
	outputPath := filepath.Join(outputDir, "Startup_Programs_Report.txt")

	output.WriteString("--- Startup Programs Report ---\n\n")
	output.WriteString("This report provides insights into programs configured to run automatically at system startup.\n\n")

	// --- 1. Startup Programs from Registry (Run & RunOnce Keys) ---
	output.WriteString("--- Startup Programs from Registry (Run & RunOnce Keys) ---\n\n")

	registryKeys := []string{
		"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run",
		"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce",
		"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run",
		"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce",
		// Also check WoW6432Node for 32-bit applications on 64-bit systems
		"HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Run",
		"HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\RunOnce",
	}

	for _, key := range registryKeys {
		output.WriteString(fmt.Sprintf("Registry Key: %s\n", key))
		// Using 'reg query' command to list entries under the key
		cmd := exec.Command("reg", "query", key)
		cmdOutput, err := cmd.CombinedOutput()
		if err != nil {
			// Check for specific error message if the key does not exist
			if strings.Contains(strings.ToLower(string(cmdOutput)), "error: the system was unable to find the specified registry key or value") {
				output.WriteString("  No entries found or key does not exist.\n\n")
			} else {
				// Log other errors
				output.WriteString(fmt.Sprintf("  Error querying registry key %s: %v\n  Output: %s\n\n", key, err, string(cmdOutput)))
			}
		} else {
			// Write the output of the reg query command
			output.Write(cmdOutput)
			output.WriteString("\n") // Add a newline for better separation between keys
		}
	}
	output.WriteString("\n")

	// --- 2. Startup Programs from Startup Folders ---
	output.WriteString("--- Startup Programs from Startup Folders ---\n\n")

	// Get APPDATA and PROGRAMDATA environment variables to find the correct paths
	appData := os.Getenv("APPDATA")
	programData := os.Getenv("PROGRAMDATA")

	startupFolders := []string{
		filepath.Join(appData, "Microsoft\\Windows\\Start Menu\\Programs\\Startup"),     // Current user's startup folder
		filepath.Join(programData, "Microsoft\\Windows\\Start Menu\\Programs\\Startup"), // All users' startup folder
	}

	for _, folder := range startupFolders {
		output.WriteString(fmt.Sprintf("Folder: %s\n", folder))
		files, err := ioutil.ReadDir(folder) // Read contents of the directory
		if err != nil {
			if os.IsNotExist(err) {
				output.WriteString("  Folder does not exist or is empty.\n\n")
			} else {
				output.WriteString(fmt.Sprintf("  Error reading folder %s: %v\n\n", folder, err))
			}
			continue // Move to the next folder
		}

		if len(files) == 0 {
			output.WriteString("  No items found in this folder.\n\n")
		} else {
			for _, file := range files {
				// List file name and last modification time
				output.WriteString(fmt.Sprintf("  - %s (Last Modified: %s)\n", file.Name(), file.ModTime().Format("2006-01-02 15:04:05")))
			}
			output.WriteString("\n")
		}
	}
	output.WriteString("\n")

	// --- Footer ---
	output.WriteString("\n\nReport generated by GoDiag. Learn more at https://github.com/LewdLillyVT/godiag")

	// Save the collected information to the designated output file
	return os.WriteFile(outputPath, output.Bytes(), 0644)
}
